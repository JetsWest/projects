import java.util.Scanner;
//BASE CODE CHANGING STORY LATER
public class Game {
    public static void main(String[] args){
        System.out.println("Rip, I waited to long to implement the on foot thing~");
        Scanner scanner = new Scanner(System.in);
        int choice = scanner.nextInt();
        if(choice == 1){
            Game();
        }
        if(choice == 2){
            endlessGame();
        }
        
        
        
        

    }
    public static void playAgain(){
        System.out.println("Play again?");
        System.out.println("1) Yes");
        System.out.println("2) No");
        Scanner scanner = new Scanner(System.in);
        int choice = scanner.nextInt();
        if (choice == 1){
            System.out.println("Loading...");
            Game();
        }
        if (choice == 2){
            System.out.println("Ok, quitting...");
            System.exit(0);
        }
    }
    public static void playAgain1(){
        System.out.println("Play again?");
        System.out.println("1) Yes");
        System.out.println("2) No");
        System.out.println("3) Endless Mode");

        Scanner scanner = new Scanner(System.in);
        int choice = scanner.nextInt();
        if (choice == 1){
            System.out.println("Loading...");
            Game();
        }
        if (choice == 2){
            System.out.println("Ok, quitting...");
            System.exit(0);
        }
        if(choice == 3){
            System.out.println("Loading...");
            endlessGame();
        }
    }
    public static void Game(){
        boolean playing = true;
        Scanner scanner = new Scanner(System.in);
        System.out.println("You were a prisoner of some empire thing and you escaped. When you escaped, you stole one of their Horses. One of the guards realized that a horse was missing before you left and sent a smalel party out to search for you. You must travel 200 miles to escape them. Good luck!");
        double canteen = 5;
        double camelwear = 5;
        int nativedistance = -20;
        int distancetraveled = 0;
        double thirst = 5;
        int hidefailed = 0;
        int gameFinished = 0;

        while(playing){

            System.out.println("You can ");
            System.out.println("1) Drink ");
            System.out.println("2) Travel full speed");
            System.out.println("3) Travel half speed");
            System.out.println("4) Stop and rest");
            System.out.println("5) Status check");
            System.out.println("6) Hide");
            System.out.println("7) Quit");

            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    if(canteen > 0){
                        canteen--;
                        thirst++;
                        nativedistance += (int)(Math.random()*6) + 5;
                    }
                    if(canteen <= 0){
                        System.out.println("You have no more water left! You need to hide or keep moving!");
                    }
                    break;
                case 2:
                    camelwear--;
                    nativedistance += (int)(Math.random()*6) + 5;
                    distancetraveled += (int)(Math.random()*6) + 13;
                    thirst--;
                    break;
                case 3:
                    camelwear -= 0.5;
                    nativedistance += (int)(Math.random()*6) + 5;
                    distancetraveled += (int)(Math.random()*6) + 7;
                    thirst -= 0.5;
                    break;
                case 4:
                    camelwear++;
                    nativedistance += (int)(Math.random()*6) + 5;
                    break;
                case 5:
                    System.out.println("Your canteen has " + canteen + " drinks left in it.");
                    System.out.println("Your horse is at " + (camelwear * 20) + "%");
                    System.out.println("You have traveled " + distancetraveled + " miles.");
                    System.out.println("The soldiers are " + (distancetraveled-nativedistance) + " miles away.");
                    System.out.println("Your thirst level is at " + thirst + ".");
                    break;
                case 6:
                    if(((int)(Math.random()*2) + 1) == 1){
                        nativedistance = ((nativedistance / nativedistance) - 21);
                        System.out.println("The gaurds lost you! they went back to the city! They will come again so you need to keep moving.");
                        
                    }else{
                        hidefailed = 1;
                    }
                    break;
                case 7:
                    System.out.println("You quit");
                    System.exit(0);
                default:
                    break;
            }

            if(choice == 2){
                if(((int) (Math.random()*9) + 1) == 2){
                    System.out.println("You found a clean river to fill your canteen!");
                    while(canteen != 5){
                        canteen++;
                    }
                    System.out.println("Your canteen was filled!");
                }
            }else if(choice == 3){
                if(((int) (Math.random()*14) + 1) == 2){
                    System.out.println("You found a clean river to fill your canteen!");
                    while(canteen != 5){
                        canteen++;
                    }
                    System.out.println("Your canteen was filled!");
                }
            }


            if((distancetraveled - nativedistance) <= 12 && (distancetraveled - nativedistance) >= 1){
                System.out.println("The gaurds are getting close!");
            }
            if(thirst <= 1){
                System.out.println("You need to drink soon!");
            }

            if(camelwear <= 1){
                System.out.println("Your horse needs to rest!");
            }

            if(hidefailed == 1 || camelwear <= 0 || thirst <= 0 || (distancetraveled - nativedistance) <= 0 || distancetraveled >= 200){
                playing = false;
            }
            
            
            if ((distancetraveled - nativedistance) > 11) {
                    System.out.println("                      P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 11) {
                    System.out.println("G                     P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 10) {
                    System.out.println("  G                   P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 9) {
                    System.out.println("    G                 P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 8) {
                    System.out.println("      G               P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 7) {
                    System.out.println("        G             P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 6) {
                    System.out.println("          G           P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 5) {
                    System.out.println("            G         P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 4) {
                    System.out.println("              G       P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 3) {
                    System.out.println("                G      P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 2) {
                    System.out.println("                  G   P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 1) {
                    System.out.println("                    G P");
                    System.out.println("- - - - - - - - - - - -");
                }


        }
        if((distancetraveled - nativedistance) <= 0){
            System.out.println("The gaurds caught you! You lost.");
            System.out.println("You traveled " + distancetraveled + " miles.");
        }else if(thirst <= 0){
            System.out.println("You died of thirst! You lost.");
            System.out.println("You traveled " + distancetraveled + " miles.");
        }else if(camelwear <= 0){
            System.out.println("Your horse died and the gaurds caught up to you! You lost.");
            System.out.println("You traveled " + distancetraveled + " miles.");
        }else if(distancetraveled >= 200){
            System.out.println("You escaped the gaurds!");
            gameFinished = 1;
        }else if(hidefailed == 1){
            System.out.println("The gaurds found you! You lose!");
        }
        
        //If the game is won then the Endless mode is unlocked on the play again prompt.
        if(gameFinished == 0){
            playAgain();
        }else{
            playAgain1();
        }    
        
    }
    public static void endlessGame(){
        boolean playing = true;
        Scanner scanner = new Scanner(System.in);
        System.out.println("start");
        System.out.println("Sample text");
        double canteen = 5;
        double camelwear = 5;
        int nativedistance = -20;
        int distancetraveled = 0;
        double thirst = 5;
        int hidefailed = 0;
        boolean Camel = true;
        int tiredness = 0; 

        while(playing){
            if(Camel){
                System.out.println("You can ");
                System.out.println("1) Drink ");
                System.out.println("2) Travel full speed");
                System.out.println("3) Travel half speed");
                System.out.println("4) Stop and rest");
                System.out.println("5) Status check");
                System.out.println("6) Hide");
                System.out.println("7) Quit");

                int choice = scanner.nextInt();
                switch (choice) {
                    case 1:
                        canteen--;
                        thirst++;
                        nativedistance += (int) (Math.random() * 6) + 6;
                        break;
                    case 2:
                        camelwear--;
                        nativedistance += (int) (Math.random() * 6) + 6;
                        distancetraveled += (int) (Math.random() * 6) + 16;
                        thirst--;
                        break;
                    case 3:
                        camelwear -= 0.5;
                        nativedistance += (int) (Math.random() * 6) + 6;
                        distancetraveled += (int) (Math.random() * 6) + 8;
                        thirst -= 0.5;
                        break;
                    case 4:
                        camelwear++;
                        nativedistance += (int) (Math.random() * 6) + 6;
                        break;
                    case 5:
                        System.out.println("Your canteen has " + canteen + " drinks left in it.");
                        System.out.println("Your camel is at " + (camelwear * 20) + "%");
                        System.out.println("You have traveled " + distancetraveled + " miles.");
                        System.out.println("The natives are " + (distancetraveled - nativedistance) + " miles away.");
                        System.out.println("Your thirst level is at " + thirst + ".");
                        break;
                    case 6:
                        if (((int) (Math.random() * 2) + 1) == 2) {
                            nativedistance = ((nativedistance / nativedistance) - 21);
                            System.out.println("The natives lost you! they went back to camp! They will come again so you need to keep moving.");

                        } else {
                            hidefailed = 1;
                        }
                        break;
                    case 7:
                        System.out.println("You quit");
                        System.exit(0);
                    default:
                        break;
                }

                //Checks for speed of travel and gives a chance to find oasis based on speed
                if (choice == 2) {
                    if (((int) (Math.random() * 9) + 1) == 2) {
                        System.out.println("You found an oasis!");
                        while (canteen != 5) {
                            canteen++;
                        }
                        System.out.println("Your canteen was filled!");
                    }
                } else if (choice == 3) {
                    if (((int) (Math.random() * 14) + 1) == 2) {
                        System.out.println("You found an oasis!");
                        while (canteen != 5) {
                            canteen++;
                        }
                        System.out.println("Your canteen was filled!");
                    }
                }

                //Checks for a loss or a win.
                if ((distancetraveled - nativedistance) <= 11 && (distancetraveled - nativedistance) >= 1) {
                    System.out.println("The natives are getting close!");
                }
                if (thirst <= 1) {
                    System.out.println("You need to drink soon!");
                }

                if (camelwear <= 1) {
                    System.out.println("Your camel needs to rest!");
                }

                if(camelwear <= 0){
                    Camel = false;
                    System.out.println("Your Camel is dead! You need to travel on foot!");
                    System.out.println("When you travel on foot, you move a much slower, but have a much higher success rate when hiding");
                    System.out.println("And you do not need to drink as often.")
                }
                
                if (hidefailed == 1 || thirst <= 0 || (distancetraveled - nativedistance) <= 0) {
                    playing = false;
                }

                //Distance visual
                if ((distancetraveled - nativedistance) > 11) {
                    System.out.println("                      P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 11) {
                    System.out.println("N                     P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 10) {
                    System.out.println("  N                   P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 9) {
                    System.out.println("    N                 P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 8) {
                    System.out.println("      N               P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 7) {
                    System.out.println("        N             P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 6) {
                    System.out.println("          N           P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 5) {
                    System.out.println("            N         P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 4) {
                    System.out.println("              N       P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 3) {
                    System.out.println("                N      P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 2) {
                    System.out.println("                  N   P");
                    System.out.println("- - - - - - - - - - - -");
                }
                if ((distancetraveled - nativedistance) == 1) {
                    System.out.println("                    N P");
                    System.out.println("- - - - - - - - - - - -");
                }
                
                
                

            }else{
                System.out.println("You can ");
                System.out.println("1) Drink ");
                System.out.println("2) Travel full speed");
                System.out.println("3) Travel half speed");
                System.out.println("4) Stop and rest");
                System.out.println("5) Status check");
                System.out.println("6) Hide and rest");
                System.out.println("7) Quit");

                int choice = scanner.nextInt();
                
                switch(choice){
                    case 1:
                        canteen--;
                        thirst++;
                        nativedistance += (int) (Math.random() * 6) + 6;
                        break;
                    case 2:
                        thirst--;
                        nativedistance += (int) (Math.random() * 6) + 6;
                        distancetraveled += (int) (Math.random() * 4) + 2;
                        break;
                    case 3:
                        tiredness = 0;
                        nativedistance += (int) (Math.random() * 6) + 6;
                        break;
                    case 4:
                        System.out.println("Your canteen has " + canteen + " drinks left in it.");
                        System.out.println("Your camel is dead");
                        System.out.println("You have traveled " + distancetraveled + " miles.");
                        System.out.println("The natives are " + (distancetraveled - nativedistance) + " miles away.");
                        System.out.println("Your thirst level is at " + thirst + ".");
                        System.out.println("Your tiredness is at " + tiredness + ". Be careful, if your tiredness reaches 10, you will pass out and be caught!");
                        break;
                    case 5:
                        if(((int)(Math.random()*3) + 1) == (1 || 2)){
                            nativedistance = ((nativedistance / nativedistance) - 21);
                            System.out.println("The gaurds lost you! they went back to the city! They will come again so you need to keep moving.");
                            
                        }else{
                            hidefailed = 1;
                        }
                        break;
                     case 6:
                        System.out.println("You quit.");
                        System.exit(0);
                        
                }
            
                                                                           
            } 
                                                                                     
        }
        //Win or loss message
        if((distancetraveled - nativedistance) <= 0){
            System.out.println("The natives caught you!");
            System.out.println("You traveled " + distancetraveled + " miles.");
        }else if(thirst <= 0){
            System.out.println("You died of thirst! ");
            System.out.println("You traveled " + distancetraveled + " miles.");
        }else if(camelwear <= 0){
            System.out.println("Your camel died and the natives caught up to you!");
            System.out.println("You traveled " + distancetraveled + " miles.");
        }else if(distancetraveled >= 200){
            System.out.println("You made it across the desert! You won!");
        }else if(hidefailed == 1){
            System.out.println("The natives found you! You lose!");
        }
        playAgain1();
    }
}

